- name: Get a list of all PVCs from any namespace
  kubernetes.core.k8s_info:
    kind: PersistentVolumeClaim
  register: pvc_list

- name: "Filter the PVC list to only show the PVCs with the storageClassName {{ old_storage_class }}"
  set_fact:
    old_storage_class_pvc: "{{ pvc_list.resources | selectattr('spec.storageClassName', 'equalto', old_storage_class) |  list }}"
  
- name: "Filter the PVC list to only show the PVCs with the name equal to {{ pvc_name }}"
  set_fact:
    filter_pvc: "{{ old_storage_class_pvc | selectattr('metadata.name', 'equalto', pvc_name) | list }}"

- name: "Display the PVC list array"
  debug:
    msg: "{{ filter_pvc }}"

- name: "Get a list of all pods from namespaces found in filter_pvc"
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ item.metadata.namespace }}"
  register: pod_list
  loop: "{{ filter_pvc }}"

- name: Display pod_list
  debug:
    msg: "{{ pod_list }}"

# go through pod list
# check if any pod has pvc named pvc_name under pvc
# remove it from pvc_list
# if it stays it means the pvc is in use
# add the pvcs in use to a list and display to runner
- name: 
  set_fact:
    pvc_in_use: "{{
            pod_list.results | selectattr('items', 'defined') | map(attribute='items') |
            sum(start=[]) | selectattr('metadata.name', 'search', pvc_name) |
            selectattr('spec.volumes', 'defined') | map(attribute='spec.volumes') |
            sum(start=[]) | selectattr('persistentVolumeClaim.claimName') | map(attribute='persistentVolumeClaim.claimName') | list
          }}"

- name: Filter out PVCs associated with Pods from PVC list
  set_fact:
    pvc_definitions: "{{ filter_pvc | selectattr('name', 'not in', pvc_in_use) | list }}"

- name: debug pvc_definitions value
  debug:
    msg: "{{ pvc_definitions }}"

- name: "Fail if there are zero {{ old_storage_class }} PVCs"
  fail: 
    msg: "Purposefully failing because no PVCs with {{ old_storage_class }} exist."
  when: "{{ filter_pvc | length == 0 }}"
